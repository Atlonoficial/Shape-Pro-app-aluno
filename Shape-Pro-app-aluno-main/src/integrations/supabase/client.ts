// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Capacitor } from '@capacitor/core';
import { capacitorStorage } from '@/lib/capacitorStorage';
import { logger } from '@/lib/logger';

const SUPABASE_URL = "https://bqbopkqzkavhmenjlhab.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJxYm9wa3F6a2F2aG1lbmpsaGFiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ5MjEwMTQsImV4cCI6MjA3MDQ5NzAxNH0.AeqAVWHVqyAn7wxNvHeuQFkJREHUTB9fZP22qpv73d0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// ✅ BUILD 28: Usar método correto para detectar plataforma nativa
const isNativePlatform = Capacitor.isNativePlatform();

// ✅ FASE 1: Lazy initialization - client só é criado quando requisitado
let _supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

export const getSupabase = () => {
  if (!_supabaseInstance) {
    // ✅ FASE 5: Logging detalhado de criação do client
    logger.info('Supabase Client', 'Creating client instance', {
      isNativePlatform,
      storageInitialized: isNativePlatform ? capacitorStorage.initialized : 'N/A (web)',
      timestamp: Date.now()
    });
    
    // ✅ BUILD 28: Verificação corrigida para plataforma nativa
    if (isNativePlatform && !capacitorStorage.initialized) {
      logger.critical('Supabase Client', 'Storage not initialized', {
        storageInitialized: capacitorStorage.initialized,
        hint: 'Client accessed before boot sequence completed'
      });
      
      throw new Error('Storage must be initialized before creating Supabase client. Wait for bootManager.markBootComplete()');
    }
    
    _supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: isNativePlatform ? capacitorStorage : localStorage,
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: false,
        flowType: 'pkce',
      },
      realtime: {
        params: {
          eventsPerSecond: 10,
        },
        timeout: isNativePlatform ? 15000 : 10000,
        heartbeatIntervalMs: 30000,
      },
      global: {
        headers: {
          'X-Client-Info': 'shape-pro-mobile/1.0',
          'X-Platform': isNativePlatform ? 'capacitor' : 'web',
        },
      },
    });
    
    logger.info('Supabase Client', 'Client created successfully');
  }
  
  return _supabaseInstance;
};

// ✅ BUILD 28: Proxy com guard corrigido para plataforma nativa
export const supabase = new Proxy({} as ReturnType<typeof createClient<Database>>, {
  get(target, prop) {
    // ✅ BUILD 28: Verificar storage apenas em plataforma nativa
    if (isNativePlatform && !capacitorStorage.initialized) {
      logger.critical('Supabase Proxy', `Accessed ${String(prop)} before storage init`);
      throw new Error(`[Build 40] Supabase.${String(prop)} accessed before storage initialization. Call getSupabase() instead or wait for boot.`);
    }
    
    const client = getSupabase();
    return client[prop as keyof ReturnType<typeof createClient<Database>>];
  }
});

// Export da chave pública para uso direto em fetch
export const SUPABASE_KEY = SUPABASE_PUBLISHABLE_KEY;